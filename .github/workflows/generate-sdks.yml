name: Generate All SDKs

on:
  workflow_dispatch:
    inputs:
      api_url:
        description: 'Base URL of the API (e.g., https://nah.pet or http://localhost:5173)'
        required: false
        default: 'https://nah.pet'
        type: string
  release:
    types: [published]

permissions:
  contents: write

jobs:
  generate-all-sdks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java (required for openapi-generator)
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install OpenAPI Generator
        run: |
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar -O openapi-generator-cli.jar

      - name: Use OpenAPI specification
        run: |
          echo "✅ Using committed OpenAPI specification"
          echo "📄 Spec info: $(jq -r '.info.title + " v" + .info.version' openapi.json)"

      - name: Generate all SDKs
        run: |
          # Liste de tous les générateurs
          generators=(
            "ada" "android" "apex" "bash" "c" "clojure" "cpp-oatpp-client" 
            "cpp-qt-client" "cpp-restsdk" "cpp-tiny" "cpp-tizen" "cpp-ue4" 
            "crystal" "csharp" "dart" "dart-dio" "eiffel" "elixir" "elm" 
            "erlang-client" "erlang-proper" "gdscript" "go" "groovy" 
            "haskell-http-client" "java" "java-helidon-client" "java-micronaut-client" 
            "javascript" "javascript-apollo-deprecated" "javascript-closure-angular" 
            "javascript-flowtyped" "jaxrs-cxf-client" "jetbrains-http-client" 
            "jmeter" "julia-client" "k6" "kotlin" "lua" "n4js" "nim" "objc" 
            "ocaml" "perl" "php" "php-dt" "php-nextgen" "powershell" "python" 
            "python-pydantic-v1" "r" "ruby" "rust" "scala-akka" "scala-gatling" 
            "scala-http4s" "scala-pekko" "scala-sttp" "scala-sttp4" "scalaz" 
            "swift-combine" "swift5" "swift6" "typescript" "typescript-angular" 
            "typescript-aurelia" "typescript-axios" "typescript-fetch" 
            "typescript-inversify" "typescript-jquery" "typescript-nestjs" 
            "typescript-node" "typescript-redux-query" "typescript-rxjs" 
            "xojo-client" "zapier"
          )

          mkdir -p generated-sdks
          successful=0
          total=${#generators[@]}

          echo "🚀 Démarrage génération de $total SDKs..."

          for generator in "${generators[@]}"; do
            echo ""
            echo "🔨 Génération SDK: $generator"
            
            # Créer le dossier pour ce générateur
            mkdir -p "generated-sdks/$generator"
            
            # Générer le SDK
            if java -jar openapi-generator-cli.jar generate \
              -i openapi.json \
              -g "$generator" \
              -o "generated-sdks/$generator" \
              --package-name "nah-pet" \
              --git-user-id "nahpet" \
              --git-repo-id "nah-pet-$generator" \
              --additional-properties=packageName=nah-pet \
              --additional-properties=projectName="Nah.pet SDK" \
              --additional-properties=packageVersion=1.0.0 \
              --additional-properties=packageCompany="Nah.pet" \
              --additional-properties=packageAuthor="Nah.pet Team" \
              --additional-properties=packageUrl="https://nah.pet" \
              --additional-properties=packageDescription="Nah.pet API client library for URL shortening" \
              --additional-properties=licenseInfo="MIT" \
              --additional-properties=licenseName="MIT License" \
              --additional-properties=clientPackage="nah-pet" \
              --additional-properties=npmName="@anclave/nah-pet" \
              --additional-properties=gemName="nahpet" \
              --additional-properties=moduleName="NahPet" \
              --additional-properties=classPrefix="LS" \
              --skip-validate-spec \
              --enable-post-process-file 2>/dev/null; then
              
              # Vérifier si des fichiers ont été générés
              if [ -d "generated-sdks/$generator" ] && [ "$(find generated-sdks/$generator -type f | wc -l)" -gt 0 ]; then
                cd generated-sdks
                tar -czf "$generator-sdk.tar.gz" "$generator/"
                cd ..
                
                size=$(du -h "generated-sdks/$generator-sdk.tar.gz" | cut -f1)
                files=$(find "generated-sdks/$generator" -type f | wc -l)
                
                echo "✅ $generator: $files fichiers ($size)"
                successful=$((successful + 1))
              else
                echo "⚠️ $generator: Aucun fichier généré"
                rm -rf "generated-sdks/$generator"
              fi
            else
              echo "❌ $generator: Échec de génération"
              rm -rf "generated-sdks/$generator"
            fi
          done

          echo ""
          echo "📊 Résumé: $successful/$total SDKs générés avec succès"
          echo "success_count=$successful" >> $GITHUB_OUTPUT
          echo "total_count=$total" >> $GITHUB_OUTPUT

      - name: Upload all SDKs
        uses: actions/upload-artifact@v4
        with:
          name: all-generated-sdks
          path: generated-sdks/
          retention-days: 90

  collect-and-summarize:
    needs: generate-all-sdks
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all SDK artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Create comprehensive summary
        run: |
          echo "# 🎉 SDK Generation Report" > GENERATION_REPORT.md
          echo "" >> GENERATION_REPORT.md
          echo "**Generated on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> GENERATION_REPORT.md
          echo "**API URL:** ${{ github.event.inputs.api_url || 'https://nah.pet' }}" >> GENERATION_REPORT.md
          echo "**Workflow:** [\${{ github.run_number }}](\${{ github.server_url }}/\${{ github.repository }}/actions/runs/\${{ github.run_id }})" >> GENERATION_REPORT.md
          echo "" >> GENERATION_REPORT.md

          successful=0
          total=0
          total_size=0

          # Count and categorize SDKs
          declare -A categories
          categories[web]="javascript typescript typescript-angular typescript-aurelia typescript-axios typescript-fetch typescript-inversify typescript-jquery typescript-nestjs typescript-node typescript-redux-query typescript-rxjs"
          categories[mobile]="android dart dart-dio swift5 swift6 swift-combine objc kotlin"  
          categories[backend]="python python-pydantic-v1 java java-helidon-client java-micronaut-client go csharp php php-dt php-nextgen ruby rust"
          categories[scripting]="bash powershell perl lua python r"
          categories[systems]="c cpp-oatpp-client cpp-qt-client cpp-restsdk cpp-tiny cpp-tizen cpp-ue4 rust"
          categories[functional]="scala-akka scala-gatling scala-http4s scala-pekko scala-sttp scala-sttp4 scalaz haskell-http-client elixir erlang-client erlang-proper clojure elm ocaml"
          categories[other]="ada apex crystal eiffel gdscript groovy jaxrs-cxf-client jetbrains-http-client jmeter julia-client k6 n4js nim xojo-client zapier javascript-apollo-deprecated javascript-closure-angular javascript-flowtyped"

          echo "## ✅ Successfully Generated SDKs" >> GENERATION_REPORT.md
          echo "" >> GENERATION_REPORT.md

          # Process each category
          for category in web mobile backend scripting systems functional other; do
            echo "### ${category^} SDKs" >> GENERATION_REPORT.md
            echo "" >> GENERATION_REPORT.md
            
            category_found=false
            for generator in ${categories[$category]}; do
              if [ -f "artifacts/${generator}-sdk.tar.gz" ]; then
                if [ "$category_found" = false ]; then
                  category_found=true
                fi
                successful=$((successful + 1))
                size=$(du -h "artifacts/${generator}-sdk.tar.gz" 2>/dev/null | cut -f1 || echo "?")
                size_bytes=$(du -b "artifacts/${generator}-sdk.tar.gz" 2>/dev/null | cut -f1 || echo "0")
                total_size=$((total_size + size_bytes))
                echo "- **${generator}** (${size})" >> GENERATION_REPORT.md
              fi
              total=$((total + 1))
            done
            
            if [ "$category_found" = false ]; then
              echo "_No SDKs generated in this category._" >> GENERATION_REPORT.md
            fi
            echo "" >> GENERATION_REPORT.md
          done

          # Convert total size to human readable
          if [ $total_size -gt 1073741824 ]; then
            total_size_hr="$(echo "scale=1; $total_size / 1073741824" | bc)GB"
          elif [ $total_size -gt 1048576 ]; then
            total_size_hr="$(echo "scale=1; $total_size / 1048576" | bc)MB"  
          elif [ $total_size -gt 1024 ]; then
            total_size_hr="$(echo "scale=1; $total_size / 1024" | bc)KB"
          else
            total_size_hr="${total_size}B"
          fi

          echo "## 📊 Generation Statistics" >> GENERATION_REPORT.md
          echo "" >> GENERATION_REPORT.md
          echo "- **Total generators attempted:** $total" >> GENERATION_REPORT.md  
          echo "- **Successfully generated:** $successful" >> GENERATION_REPORT.md
          echo "- **Success rate:** $(echo "scale=1; $successful * 100 / $total" | bc)%" >> GENERATION_REPORT.md
          echo "- **Total size:** $total_size_hr" >> GENERATION_REPORT.md

          echo "" >> GENERATION_REPORT.md
          echo "## 🔗 Usage" >> GENERATION_REPORT.md
          echo "" >> GENERATION_REPORT.md
          echo "1. Download the SDK for your preferred language from the artifacts" >> GENERATION_REPORT.md
          echo "2. Extract the tarball: \`tar -xzf <generator>-sdk.tar.gz\`" >> GENERATION_REPORT.md
          echo "3. Follow the README instructions in the extracted directory" >> GENERATION_REPORT.md
          echo "4. Configure the client to use your API URL: \`${{ github.event.inputs.api_url || 'https://nah.pet' }}\`" >> GENERATION_REPORT.md

          echo "" >> GENERATION_REPORT.md
          echo "---" >> GENERATION_REPORT.md
          echo "_Generated by [OpenAPI Generator](https://openapi-generator.tech/) v7.8.0_" >> GENERATION_REPORT.md

          # Display the report
          echo "📋 Generation Report:"
          cat GENERATION_REPORT.md

      - name: Upload generation report
        uses: actions/upload-artifact@v4
        with:
          name: 📋-generation-report
          path: GENERATION_REPORT.md

      - name: Create SDK collection
        run: |
          mkdir -p sdk-collection
          cp artifacts/*.tar.gz sdk-collection/ 2>/dev/null || true

          # Create index file
          echo "# 🚀 Complete SDK Collection" > sdk-collection/README.md
          echo "" >> sdk-collection/README.md
          echo "This collection contains all successfully generated SDKs for the Nah.pet API." >> sdk-collection/README.md
          echo "" >> sdk-collection/README.md
          echo "## Available SDKs:" >> sdk-collection/README.md
          echo "" >> sdk-collection/README.md

          for tarball in sdk-collection/*.tar.gz; do
            if [ -f "$tarball" ]; then
              basename=$(basename "$tarball" .tar.gz)
              generator=$(echo "$basename" | sed 's/-sdk$//')
              size=$(du -h "$tarball" | cut -f1)
              echo "- **$generator** - \`$(basename "$tarball")\` ($size)" >> sdk-collection/README.md
            fi
          done

      - name: Upload complete SDK collection
        uses: actions/upload-artifact@v4
        with:
          name: 🎁-complete-sdk-collection
          path: sdk-collection/
          retention-days: 90

      - name: Prepare release assets
        if: github.event_name == 'release'
        run: |
          # Copy all SDK archives to root for release upload
          cp sdk-collection/*.tar.gz . 2>/dev/null || true

      - name: Upload to release assets
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *-sdk.tar.gz
            GENERATION_REPORT.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
